{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","valueChange","evt","value","target","setState","systemChange","system","language","languageChange","state","_this$state","console","log","react","className","htmlFor","id","type","onChange","disabled","react_number2words_default","a","React","Boolean","window","location","hostname","match","ReactDOM","render","react_default","createElement","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wPA+GeA,cArGb,SAAAA,EAAYC,GAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACxBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQRQ,YAAc,SAACC,GACb,IAAMC,EAAQD,EAAIE,OAAOD,MACzBT,EAAKW,SAAS,CAAEF,WAXQT,EAc1BY,aAAe,SAACJ,GACd,IAAMK,EAASL,EAAIE,OAAOD,MAC1BT,EAAKW,SAAS,CAAEE,SAAQC,SAAU,QAhBVd,EAmB1Be,eAAiB,SAACP,GAChB,IAAMM,EAAWN,EAAIE,OAAOD,MAC5BT,EAAKW,SAAS,CAAEG,cAnBhBd,EAAKgB,MAAQ,CACXP,MAAO,QACPI,OAAQ,gBACRC,SAAU,MALYd,wEAwBjB,IAAAiB,EAC6Bd,KAAKa,MAAjCP,EADDQ,EACCR,MAAOI,EADRI,EACQJ,OAAQC,EADhBG,EACgBH,SAEvB,OADAI,QAAQC,IAAI,CAACV,QAAOI,SAAQC,aAE1BM,EAAA,yBACEA,EAAA,iDAEAA,EAAA,qBAAKC,UAAU,YACbD,EAAA,qBAAKC,UAAU,UACbD,EAAA,qBAAKC,UAAU,QACbD,EAAA,oBAAIC,UAAU,mBAAd,2BACAD,EAAA,qBAAKC,UAAU,aACbD,EAAA,qBAAKC,UAAU,QACbD,EAAA,qBAAKC,UAAU,eACbD,EAAA,qBAAKC,UAAU,cACbD,EAAA,uBAAOE,QAAQ,QAAQD,UAAU,yBAAjC,SACAD,EAAA,uBACEG,GAAG,QACHC,KAAK,SACLH,UAAU,eACVZ,MAAOA,EACPgB,SAAUtB,KAAKI,eAInBa,EAAA,qBAAKC,UAAU,mBACbD,EAAA,uBAAOE,QAAQ,SAASD,UAAU,yBAAlC,iBACAD,EAAA,wBACEG,GAAG,SACHF,UAAU,eACVZ,MAAOI,EACPY,SAAUtB,KAAKS,cAEfQ,EAAA,wBAAQX,MAAM,iBAAd,iBACAW,EAAA,wBAAQX,MAAM,eAAd,kBAIJW,EAAA,qBAAKC,UAAU,mBACbD,EAAA,uBAAOE,QAAQ,WAAWD,UAAU,yBAApC,YACAD,EAAA,wBACEG,GAAG,WACHF,UAAU,eACVZ,MAAOK,EACPY,SAAqB,gBAAXb,EACVY,SAAUtB,KAAKY,gBAEfK,EAAA,wBAAQX,MAAM,MAAd,WACAW,EAAA,wBAAQX,MAAM,MAAd,cAMRW,EAAA,qBAAKC,UAAU,eACbD,EAAA,gCAEAA,EAAA,qBAAKC,UAAU,QACbD,EAAA,mCAEFA,EAAA,0BACEA,EAAA,cAACO,EAAAC,EAAD,CACEnB,MAAOA,EACPI,OAAQA,EACRC,SAAUA,kBAzFde,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAT,EAAAU,cAACC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.379f6602.chunk.js","sourcesContent":["import * as React from 'react';\nimport Number2Words from 'react-number2words';\n\ntype Props = {};\ninterface State {\n  value: number | string;\n  system: 'international' | 'hinduArabic';\n  language: 'en' | 'np';\n}\nclass App extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      value: 5423561,\n      system: 'international',\n      language: 'en'\n    };\n  }\n\n  valueChange = (evt: any) => {\n    const value = evt.target.value;\n    this.setState({ value });\n  }\n\n  systemChange = (evt: any) => {\n    const system = evt.target.value;\n    this.setState({ system, language: 'en' });\n  }\n\n  languageChange = (evt: any) => {\n    const language = evt.target.value;\n    this.setState({ language });\n  }\n\n  render() {\n    const { value, system, language } = this.state;\n    console.log({value, system, language});\n    return (\n      <div>\n        <h1>React Number to Words</h1>\n\n        <div className=\"row my-4\">\n          <div className=\"col-12\">\n            <div className=\"card\">\n              <h4 className=\"m-0 card-header\">Convert Number to Words</h4>\n              <div className=\"card-body\">\n                <div className=\"my-3\">\n                  <div className=\"form-inline\">\n                    <div className=\"from-group\">\n                      <label htmlFor=\"value\" className=\"justify-content-start\">Value</label>\n                      <input\n                        id=\"value\"\n                        type=\"number\"\n                        className=\"form-control\"\n                        value={value}\n                        onChange={this.valueChange}\n                      />\n                    </div>\n\n                    <div className=\"from-group ml-3\">\n                      <label htmlFor=\"system\" className=\"justify-content-start\">Number System</label>\n                      <select\n                        id=\"system\"\n                        className=\"form-control\"\n                        value={system}\n                        onChange={this.systemChange}\n                      >\n                        <option value=\"international\">International</option>\n                        <option value=\"hinduArabic\">Hindu Arabic</option>\n                      </select>\n                    </div>\n\n                    <div className=\"from-group ml-3\">\n                      <label htmlFor=\"language\" className=\"justify-content-start\">Language</label>\n                      <select\n                        id=\"language\"\n                        className=\"form-control\"\n                        value={language}\n                        disabled={system !== 'hinduArabic'}\n                        onChange={this.languageChange}\n                      >\n                        <option value=\"en\">English</option>\n                        <option value=\"np\">Nepali</option>\n                      </select>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"code-result\">\n                  <h6>Code</h6>\n\n                  <div className=\"mt-3\">\n                    <h6>Result</h6>\n                  </div>\n                  <code>\n                    <Number2Words\n                      value={value}\n                      system={system}\n                      language={language}\n                    />\n                  </code>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}